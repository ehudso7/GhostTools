generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  credits       Credits?
  usageHistory  UsageHistory[]
  paymentHistory PaymentHistory[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// GhostTools Models
model Credits {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount    Int      @default(0)
  updatedAt DateTime @default(now())
}

model Subscription {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeId    String   @unique
  status      String   // 'active', 'canceled', 'past_due', etc.
  planId      String   // 'starter', 'pro'
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UsageHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  toolName  String   // 'agentwrite', 'podscribe'
  creditsUsed Int
  metadata  String?  // JSON string for data storage
  createdAt DateTime @default(now())
}

model PaymentHistory {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeSessionId String?  @unique
  stripeSubscriptionId String?
  referralId      String?  // Rewardful referral ID
  amount          Int      // Amount in cents
  status          String   // 'completed', 'failed', 'refunded'
  type            String   // 'one-time', 'subscription'
  createdAt       DateTime @default(now())
}